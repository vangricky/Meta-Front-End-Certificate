//React Basics

//Things I will learn:
1. Develop familiarity with the React.js library
2. Explore state and state-management
3. Navigation and asserts in React.js

//Components
- Components combine with different components to create a full website.
- React is popular because its great at composing and building components to make websites.
- We will be working with state with the React app.
- State: The values of all variables your app is working with at any given point.

// React Basics
In this course, you will be doing these things:
- Styling React Apps
- Event Handling
- Navigation and assets 
- Portfolio Project

Everything revolves around components. COMPONENTS, COMPONENTS, COMPONENTS!
...what are components?...
ah, yes, they are:
complex UI's from small and isolated pieces of JS code!

We will learn how to build components, how to structure and customize React projects!


// MODULE EXPORTS
1. Default Exports 
2. Named Exports


// Default Exports
- You can have ONE DEFAULT EXPORT per JavaScript module
'export default function'
'export default'
------------------------
function addTwo(a, b) {
    console.log(a + b);
}

export default addTwo;
------------------------

// Named Exports
- You can export as many times as you want

------------------------
export function addTwo(a, b) {
    console.log(a + b);
}

export function addThree(a + b + c) {
    console.log(a + b + c);
}
-------------------------

Another way to do named exports are:

-------------------------

function addTwo(a, b) {
    console.log(a + b);
}

function addThree(a + b + c) {
    console.log(a + b + c);
}

export { addTwo, addThree };

-------------------------

HOW TO IMPORT MODULE USING 'DEFAULT EXPORT':
type: " import addTwo from "/.addTwo"; " into the top of the new module(file), for example 'multiplication.js'

HOW TO IMPROT MODULE USING 'NAMED EXPORT':
type: " import { addTwo } from "./addTwo"; " into the top of the new module(file)



                                        // STEPS TO START A REACT Project
                                        1. Open terminal
                                        2. type: 'npm init react-app firstapp'
                                        3. Follow instructions after installing


Terms: 
SPAs (Single Page Applications)



React:
- build and compose components
- high performance rendering -> 
- Component rendering


// JavaScript Refresher
function multiply(num1) {
    console.log(num1 * num1); // 100
}
multiply(10);
                                            // REACT USES 2 TYPES OF COMPONENTS!!!!!
// Functional Components
// Class Components 

// Functional Components
Must be used as a JSX element

    function Welcome() {
        return <h1>"Hello"</h1>
    };


// Class Components
    class Welcome extends React.Component
    {
        render() {
            return <h1>"Hello"</h1>
        };
    };

Before continuing, you must need to know a little more about 'JSX' (JavaScript XML) XML stands for: Extensible Markup Langauge. 
So, I will give you an example. Pretend we have a module (file) called 'App.js':

App.js:
function App() {
    return (
        <div className='App'>
            <h1>Hello React.</h1>
        </div>
    );
}
export default App


Above is JSX. Well, line 132 is, I think everything is too. Looks like HTML, but isnt. 







more example on where to put your completed component:

<div id="root">
    <!-- This element's contents will be
        replaced with your component. -->
</div>











JSX is used in React
JSX is pretty similar to HTML. Looks so similar.
It combines HTML and JavaScript.

To create a component.
1. Make a new .js file, name it (for example) 
    Heading.js

    - The first letter must be capitalized BECAUSE React knows normal js as the lowercase letter.
    - capitalizing first letter in .js file will help React know its a component


Now, lets practice writing your first component.
For example, we have a new file called 'Heading.js'
It is a JavaScript file, as it has '.js' at the end of the file.
Below, is going to be what goes in the Heading.js file.


function Heading() {
    let title = "This is a specific heading";
    return (
        <h1>{title}</h1>
    );
};


Alright, so above, we just wrote our first official component. We start with 'function', then name of function. Then add parenthesis to 
make it a full-on function, then type curly braces and enter the code in-between the curly braces. 
We then write 'let', then made title the variable with "This is a specific heading" saved in the variable.
Then we wrote 'return', with parenthesis and wrote our xml in there. 
As we can see, title is in the h1, but it has curly braces surrounding it, this must be! -for it to display what's in the variable.
If we do not add the curly braces around title, it will display "title".



TERM:
Transpiling: interpreting a programming language and translating it to a specific target language










//              Creating React Project (again)
1. Open terminal
2. type 'npm init react-app .'
        (the . at the end of line two, instructs vscode to run this command in the CURRENT folder)
3. wait for app to build
4. Then, type: npm start

Go into the src folder in your newly created react-app
Delete everything in the function App() {

}

Refer to the video in week 1 "Creating react component" if you need to review how to start a brand new react project.






                                        // The React Project structure
In this video, we will go over the following:
1. Explain React's default folder structure
2. Outline the benefits of React's folder structure
3. Customize React's folder structure
4. Explain the benefits of planning folder use

So, when we do the 'npm init react-app .', we created a react project, itll take some time to finish downloading
all components and files for the default project.

Then, after it has finished downloading everything. We see that we have the project files.
In that project file we have more folders and files.
The main FOLDERS we have are:
- node_modules
- public
- src

In the 'node modules' folder: it has all the repositories for all the modules in the react app.
In the 'public' folder: it contains the assets that will be displayed to the user
    The most important file in this 'public' folder, is the 'index.html' file.
In the 'src' folder: it contains all the essential files to make sure the app runs and functions
    As a React developer, we will be using this folder so much more!

MOST IMPORTANT FILE IS: index.js 












//                          HOW TO PROPERLY MAKE A REACT APP, this shall be the final tutorial.. I think...

1. Open terminal
2. type 'npm init react-app (name of project)'
3. Press enter and wait until folder is created
4. Go into src folder and make a new folder for your components called 'components'
5. make .js files in the components folder, naming them according to your desires.
    REMEMBER, "CAPITALIZE" the first letter in the .js file in the components folder!!!!!!







        // IMPORTING components into your file!

DISTIGUISHING BETWEEN USING "DEFAULT" OR "NAMED" EXPORTS
Use Default Exports (export default ...) when the function is the same name as the file name.
Use Named Exports when you want function name to be different between file name.

T E R M S to remember:
1. Component: Small piece of functionality
2. Module: Series of components

IMPORT:

type : 'import (component name) from './App' (write the dash then whereever the component is in)
example: import App from './App'






                                        //COMPONENT USE AND Styling

                                        //PROPS


import React from 'react';

export function App(props) {
    return (
        <h1>{props.title}</h1>
    );
};




okay, example... idk how props work yet but.
but, these two files below is how you pass in the props.

//Index.js
import React from 'react';
import ReactDOM from 'react-dom/client';

import App from './App.js'

ReactDOM.createRoot(
    document.querySelector('#root')
).render(<App title="Welcome" />)

//App.js
import React from 'react;

export function App(props) {
    return (
        <h1>{props.title}</h1>
    );
};

Functional Components: Reusable blocks of code that can be reused






                [Component Use and Styling: Principles of Components: Props] PROPS: similar to functions w/ parameters

                For example:
                export function App(props) {
                    return (
                        <h1>{props.title}</h1>
                    )
                }

BEFORE going into learning React Props, let's revisit 'JavaScript Ojects'
JavaScript Object
- Variable that can contain many values
- Groups related data of different types
- Contain object properties

For Example, in this js object:
const fruit = {type:"Apple", quantity: 500, color: "green"};

These objects are 'key:value' pairs.
We can call specific things of fruit by typing:
console.log(fruit.type)

Now with that review, let's learn about Props.

PROPS
- Allows you to pass data between components
- Arguments are passed like HTML attributes
- Uses the keyword 'props'

When 2 components communicate with each other, the component sending the prop data is known as the PARENT,
and the component receiving the data is known as the CHILD.


VIDEO: Using props in components 
In this video, we will explore 'pass props to and within a component' and 'pass props using functions'

Nav Component (how to make a nav using react):
function Nav() {
    return (
        <nav className="main-nav">
            <ul>
                <li>Home</li>
                <li>Articles</li>
                <li>About</li>
                <li>Contact</li>
            </ul>
        </nav>
    );
}

export default Nav;

If a component is getting IMPORTED into a file, the IMPORTED files are the child component. The file that it's getting imported to, is the PARENT component.


VIDEO: Introducing JSX
- Explain the concept of JSX Styling
- Understand how to mix coding languages
Expressive. JSX can be expressive.
JSX allows devs to write html directly inside JavaScript code.
For example:

    function Nav(props) {
        return (
            <nav className="main-nav">
                <ul>
                    <li>{props.first}</li>
                    <li>{props.second}</li>
                    <li>{props.third}</li>
                    <li>{props.fourth}</li>
                </ul>
            </nav>
        );
    }

    export default Nav;


JSX return statement:

function Header() {
    return <h1>Welcome</h1>     <---- the JSX return statement
}
export default Header;

The return statements can be thought of as the area of expressive syntax that allows you to write regular HTML code as you'd like to have it in your rendered app.

Use 'className' in the JSX, to STYLE the component. Just like how you would add the 'class' attribute in HTML to link it to the CSS file.