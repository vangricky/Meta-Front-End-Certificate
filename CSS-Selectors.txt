//Combination Selectors

There are '4' types of combination selections, and they are...
1. Descendant Selectors (using space)
2. Child Selectors (>)
3. General Sibling Selectors (~)
4. Adjacent Sibling Selectors (+)

Below, I will type an example code. Below the example code, I will explain each Combination Selectors

<div id="blog">
    <h1>Latest News</h1>
    <div>
    <h1>Weather Forecast</h1>
    <p>The weather will be sunny</p>
    <p>Tomorrow will be rainy.</p>
    </div>
</div>

'Descendant Selectors': Elements contained within another selector 
example: #blog h1 {}

'Child Selectors': Instead of space, its more specific. You first select a person, then select their immidiate children with a specific value
example: #blog > h1 {}
this is the case, because we see that there '2' h1's. If you only want to customize the FIRST h1, use a CHILD SELECTOR.
the output will be: the 1st h1 will be customized, and the second h1 will be just normal and untouched,

'General Sibling Selectors': Allow you to select a person, then select all younger brothers 
example: h1 ~ p {}
output: all p's under the h1 element will be customized

'Adjacent Sibling Selectors': Use adjacent selectors to target only the first, or adjacent, element 
that follows another element.
example: div + p {}



// Pseudo-classes: state-based selectors
for example: 
':hover'
in focus
visited link
specific Elements

Syntax (this is how to write a pseudo class in the css document):
seletor:pseudo-class {
    property: value
}


User Action States:
1. :hover (something happens when the user 'hovers' over the element)
2. :active (something happens when the user clicks on the element)
3. :focus



// Form States
1. :disabled and :enabled
2. :checked and :indeterminate
3. :valid and :invalid


// Specific Position-Based States
1. :first-of-type
2. :last-of-type
3. :nth-of-type()
4. :nth-last-of-type()

// Imagine we have text in a few list points. If we want to just change the color of the FIRST letter in each list, this is 
what you will have to do:

li::first-letter {
    color: coral;
    font-weight: bold;
    font-size: 20px
}

// BELOW: will make the first line of text have an underline

li::first-line {
    color: black;
    text-decoration: underline;
}
// BELOW: will change the style of the bullet point of the li
li::marker {
    color: cornflowerblue;
    content: '>>'
}

//BELOW: will change the style of when you click, hold, and drag the text, it will change the color and such

li::selection {
    color:brown;
    background-color: antiquewhite;
}

.(classname)::before {

}

.(classname)::after {

}



// Web-link States


:link
:visited


// THIS IS THE RIGHT WAY TO WRITE
LVHA
link, visited, hover, active








// EFFECT
change of result of consequence or cause


//Animation : Effect 
graphics in motion transitioning over time

//GIFs
Graphics Interchange Form

// Ellipses Property 
white-space: nowrap;
overflow: hidden;
text-overflow: ellipsis; //the leftover text will be displayed only when you HOVER over it.
text-overflow: clip;
word-wrap: break-word;
text-shadow: 0 0 30px green; ( x-coordinate, y-coordinate, blur radius, shadow color)


// Transforms and Transitions Elements

transform: rotate(0deg);
transition: .3s;
transform: skewX(20deg); //rotate the text in x axis



//              CSS Animation
1. Animation Property
2. @Keyframe rule

Keyframe syntax:
@keyframes animationname {keyframes-selector {css-styles;}}
    or
@keyframes animationname {
    from { color: blue; }
    to { color: red; }
}

//  ANIMATION PROPERTY:
animation: name duration timing-function delay iteration-count direction fill-mode play-state
    example:

animation:
div {
    animation: myanimation 3s infinite;
}

@keyframes cycle {
    from { transform: rotate(0deg); }
    to { transform: rotate(360def); }
}

//     HOW TO @keyframes
1. in css, type:
    @keyframes (make a variable, name it anything you want) {
        from {
            color:red;
        }
        to {
            color: blue;
        }
    }

2. in the element you want, type:
span {
    animation: (name of variable you made in step 1) (then click space bar, then the second value will be 'DURATION') (click space bar, then 3rd value will be 'ITERATION COUNT', so it'll run 3 times! Could also write 'infinite' in third value)
}



//  MORE EXAMPLE IS TO USE PERCENTAGES , UP TO 100% , so like:

@keyframes highlighttext {
    0% {
        color: red;
    }
    50% {
        color: green;
        font-size: 10px
    }
    100% {
        color: blue;
    }
}



// ANIMATION PROPERTIES:
/*
animation-name:             none 
animation-duration:         0s 
animation-timing-function:  ease 
animation-delay:            0s 
animation-iteration-count:  1 
animation-direction:        normal 
animation-fill-mode:        none 
animation-play-state:       running 
animation-timeline:         auto 
*/


//LOADING BAR ANIMATION

@keyframes loader {
    from { width: 50px; }
    to   { width: 200px; }
}

.box {
    background-color: lightcoral; 
    width: 50px; 
    height: 50px;
    animation: loader 3s ease 1;
}